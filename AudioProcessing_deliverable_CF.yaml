AWSTemplateFormatVersion: '2010-09-09'
Description: CF Template for multi_speaker_audio file(WAV) Processing Implementation.
Resources:
  AudioRawBucket:
    Type: 'AWS::S3::Bucket'

  AudioPrcsdBucket:
    Type: 'AWS::S3::Bucket'

  CreateCustomPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      Description: Policy for creating a test database
      Path: /
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 's3:GetBucketNotification'
              - 's3:PutBucketNotification'
            Resource: [!GetAtt AudioRawBucket.Arn, !GetAtt AudioPrcsdBucket.Arn]
          - Effect: Allow
            Action:
                    - 'logs:CreateLogGroup'
                    - 'logs:CreateLogStream'
                    - 'logs:PutLogEvents'
            Resource: 'arn:aws:logs:*:*:*'
          - Effect: Allow
            Action:
                    - 's3:PutObject'
                    - 's3:GetObject'
                    - 's3:List*'
                    - 's3:GetBucketLocation'
            Resource: 
              - !GetAtt AudioRawBucket.Arn
              - !GetAtt AudioPrcsdBucket.Arn
              - !Join ['',[!GetAtt AudioRawBucket.Arn,"/*"]]
              - !Join ['',[!GetAtt AudioPrcsdBucket.Arn,"/*"]]
          - Effect: Allow
            Action:
                    - 'SQS:SendMessage'
                    - 'SQS:ReceiveMessage'
                    - 'SQS:DeleteMessage'
            Resource: !GetAtt TaskAudioQueue.Arn
          - Effect: Allow
            Action:
                    -  'glue:GetTable'
                    -  'glue:GetTables'
                    -  'glue:GetDatabase'
                    -  'glue:CreateTable'
            Resource: [ !Sub 'arn:aws:glue:${AWS::Region}:${AWS::AccountId}:database/default',
                       !Sub 'arn:aws:glue:${AWS::Region}:${AWS::AccountId}:catalog',
                        !Sub 'arn:aws:glue:${AWS::Region}:${AWS::AccountId}:table/default/transcribe_data']
          - Effect: Allow
            Action:
                    -  'athena:GetNamedQuery'
                    -  'athena:StartQueryExecution'
                    -  'athena:GetQueryExecution'
                    -  'athena:GetTable*'
                    -  'athena:List*'
            Resource: '*'
          - Effect: Allow
            Action:
                    -   'transcribe:StartTranscriptionJob'
                    -   'transcribe:GetTranscriptionJob'
                    -   'transcribe:DeleteTranscriptionJob'
            Resource: '*'
          - Effect: Allow
            Action:
                    -   'sns:Publish'
            Resource: !Ref TranscribeCompletionSNSTopic
          - Effect: Allow
            Action:
              - comprehend:DetectDominantLanguage
              - comprehend:BatchDetectDominantLanguage
              - comprehend:DetectEntities
              - comprehend:BatchDetectEntities
              - comprehend:DetectKeyPhrases
              - comprehend:BatchDetectKeyPhrases
              - comprehend:DetectPiiEntities
              - comprehend:DetectSentiment
              - comprehend:BatchDetectSentiment
              - comprehend:DetectSyntax
              - comprehend:BatchDetectSyntax
              - comprehend:ClassifyDocument
              - comprehend:DescribeTopicsDetectionJob
              - comprehend:ListTopicsDetectionJobs
              - comprehend:DescribeDominantLanguageDetectionJob
              - comprehend:ListDominantLanguageDetectionJobs
              - comprehend:DescribeEntitiesDetectionJob
              - comprehend:ListEntitiesDetectionJobs
              - comprehend:DescribeKeyPhrasesDetectionJob
              - comprehend:ListKeyPhrasesDetectionJobs
              - comprehend:DescribePiiEntitiesDetectionJob
              - comprehend:ListPiiEntitiesDetectionJobs
              - comprehend:DescribeSentimentDetectionJob
              - comprehend:ListSentimentDetectionJobs
              - comprehend:DescribeDocumentClassifier
              - comprehend:ListDocumentClassifiers
              - comprehend:DescribeDocumentClassificationJob
              - comprehend:ListDocumentClassificationJobs
              - comprehend:DescribeEntityRecognizer
              - comprehend:ListEntityRecognizers
              - comprehend:ListTagsForResource
              - comprehend:DescribeEndpoint
              - comprehend:ListEndpoints
            Resource: '*'


  LambdaExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - 'sts:AssumeRole'
        Path: /
        ManagedPolicyArns:
          - !Ref CreateCustomPolicy


  SubmittingTranscribeJobFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Intial LambdaFunction for submitting transcribe job.
      Runtime: python3.7
      Code:
        S3Bucket: aws-ml-blog
        S3Key: artifacts/transcribe_audio_processing/Audio_s3_event_transcribe.zip
      Handler: lambda_function.lambda_handler
      MemorySize: 542
      Timeout: 900
      Role:
        Fn::GetAtt:
          - LambdaExecutionRole
          - Arn
      Timeout: "900"
      Environment:
        Variables:
          PROCSDBUCKET: !Ref AudioPrcsdBucket
          RAWBUCKET: !Ref AudioRawBucket
          AthenaNamedQuery: !Ref AthenaNamedQuery
          ASYNC_AUDIO_QUEUE_URL: !Ref TaskAudioQueue


  TaskAudioQueue:
    Type: AWS::SQS::Queue
    Properties:
      VisibilityTimeout: 1600
      QueueName: AudioProcApp-Req1

  LambdaInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt SubmittingTranscribeJobFunction.Arn
      Action: 'lambda:InvokeFunction'
      Principal: s3.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !GetAtt AudioRawBucket.Arn


  ProcessingTranscribeOutputFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: LambdaFunction for processing transcribe output(speech to text).
      Runtime: python3.7
      Code:
        S3Bucket: aws-ml-blog
        S3Key: artifacts/transcribe_audio_processing/Audio_post_prosessing.zip
      Handler: lambda_function.lambda_handler
      MemorySize: 542
      Timeout: 900
      Role:
        Fn::GetAtt:
          - LambdaExecutionRole
          - Arn
      Timeout: "900"
      Environment:
        Variables:
          PROCSDBUCKET: !Ref AudioPrcsdBucket
          AthenaNamedQuery: !Ref AthenaNamedQuery
          ASYNC_AUDIO_QUEUE_URL: !Ref TaskAudioQueue
          TranscribeCompletionSNSTopic: !Ref TranscribeCompletionSNSTopic


  ScheduledRule:
      Type: AWS::Events::Rule
      Properties:
        Description: "ScheduledRule"
        ScheduleExpression: "rate(2 minutes)"
        State: "ENABLED"
        Targets:
        -
          Arn:
            Fn::GetAtt:
              - "ProcessingTranscribeOutputFunction"
              - "Arn"
          Id: "TargetFunctionV1"

  lambdaEventInvoke:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt ProcessingTranscribeOutputFunction.Arn
      Principal: "events.amazonaws.com"
      SourceArn:
        Fn::GetAtt:
        - "ScheduledRule"
        - "Arn"


  CustomResourceLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |

            from __future__ import print_function
            import json
            import boto3
            import cfnresponse

            SUCCESS = "SUCCESS"
            FAILED = "FAILED"

            print('Loading function')
            s3 = boto3.resource('s3')
            athena_client = boto3.client('athena')


            def lambda_handler(event, context):
                print(event)
                print("Received event: " + json.dumps(event, indent=2))
                responseData={}
                try:
                    if event['RequestType'] == 'Delete':
                        print("Request Type:",event['RequestType'])
                        Bucket=event['ResourceProperties']['Bucket']
                        delete_notification(Bucket)
                        print("Sending response to custom resource after Delete")

                    elif event['RequestType'] == 'Create' or event['RequestType'] == 'Update':
                        print("Request Type:",event['RequestType'])
                        LambdaArn=event['ResourceProperties']['LambdaArn']
                        Bucket=event['ResourceProperties']['Bucket']
                        print("printing values")
                        print(LambdaArn)
                        print(Bucket)
                        add_notification(LambdaArn, Bucket)
                        print("add notification success")
                        responseData={'Bucket':Bucket}
                        print("Sending response to custom resource")
                    responseStatus = 'SUCCESS'
                except Exception as e:
                    print('Failed to process:', e)
                    responseStatus = 'FAILED'
                    responseData = {'Failure': 'Something bad happened.'}
                cfnresponse.send(event, context, responseStatus, responseData)

            def add_notification(LambdaArn, Bucket):
                bucket_notification = s3.BucketNotification(Bucket)
                response = bucket_notification.put(
                  NotificationConfiguration={
                    'LambdaFunctionConfigurations': [
                      {
                          'LambdaFunctionArn': LambdaArn,
                          'Events': [
                              's3:ObjectCreated:*'
                          ]
                      }
                    ]
                  }
                )
                print("Put request completed....")

            def delete_notification(Bucket):
                bucket_notification = s3.BucketNotification(Bucket)
                response = bucket_notification.put(
                    NotificationConfiguration={}
                )
                print("Delete request completed....")
      Runtime: python3.6
      Timeout: 50

  LambdaTrigger:
    Type: 'Custom::LambdaTrigger'
    Properties:
      ServiceToken: !GetAtt CustomResourceLambdaFunction.Arn
      LambdaArn: !GetAtt SubmittingTranscribeJobFunction.Arn
      Bucket: !Ref AudioRawBucket


  AthenaNamedQuery:
    Type: AWS::Athena::NamedQuery
    Properties:
      Database: default
      Description: A query that selects all aggregated data
      Name: CreateTableDDL
      QueryString:
        !Join
          - ''
          - - 'CREATE EXTERNAL TABLE IF NOT EXISTS '
            - ' default.transcribe_data  (audio_transcribe_job string,time_start string, speaker string, speaker_text string) '
            - " ROW FORMAT DELIMITED FIELDS TERMINATED BY '|' LOCATION 's3://"
            - !Ref AudioPrcsdBucket
            - "/transcribe/output/'; "

  TranscribeCompletionSNSTopic:
    Type: AWS::SNS::Topic
    
Outputs:
  TranscribeCompletionSNSTopic:
    Description: Documents Set Translate Completion SNS Topic
    Value: !Ref TranscribeCompletionSNSTopic  
  InputBucket:
    Description: Input Documents to be translated.
    Value: !Ref AudioRawBucket
  OutputBucket:
    Description: translated output Documents.
    Value: !Ref AudioPrcsdBucket 
  ProcessingTranscribeOutputFunction:
    Value: !Ref ProcessingTranscribeOutputFunction